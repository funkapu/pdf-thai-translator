import 'dotenv/config';
import express from 'express';
import multer from 'multer';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import * as pdfjsLib from 'pdfjs-dist/legacy/build/pdf.mjs';
import { PDFDocument } from 'pdf-lib';
import fontkit from '@pdf-lib/fontkit';
import { GoogleGenAI } from '@google/genai';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ===== Config =====
const PORT = process.env.PORT || 3001;
const app = express();
app.use(express.json({ limit: '10mb' }));

// Uploads dir
const upload = multer({ dest: path.join(__dirname, 'uploads') });

// Health
app.get('/health', (_req, res) => res.send('ok'));

// ===== Gemini (SDK ‡πÉ‡∏´‡∏°‡πà) =====
if (!process.env.GEMINI_API_KEY) {
  console.error('‚ùå Missing GEMINI_API_KEY in .env');
  process.exit(1);
}
const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });
const MODEL = 'gemini-1.5-flash';

// ===== Fonts & pdf.js =====
const thaiFontPath = path.join(__dirname, 'assets', 'fonts', 'NotoSerifThai-Regular.ttf');

// pdf.js ‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏µ‡πâ standard fonts ‡πÄ‡∏õ‡πá‡∏ô file:// URL
const standardFontDataUrl = new URL(
  'node_modules/pdfjs-dist/standard_fonts/',
  import.meta.url
).href;

// ===== Helpers =====
function chunkText(s, maxLen = 4000) {
  if (!s) return [];
  const chunks = [];
  let cur = '';
  for (const seg of s.split(/(\s+)/)) {
    if (cur.length + seg.length > maxLen && cur.length > 0) {
      chunks.push(cur); cur = seg;
    } else cur += seg;
  }
  if (cur.trim().length) chunks.push(cur);
  return chunks;
}

// Concurrency limit ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≤‡πÜ
async function mapConcurrent(items, limit, worker) {
  const ret = new Array(items.length);
  let i = 0, active = 0;
  return await new Promise((resolve, reject) => {
    const next = () => {
      if (i >= items.length && active === 0) return resolve(ret);
      while (active < limit && i < items.length) {
        const idx = i++; const item = items[idx]; active++;
        Promise.resolve(worker(item, idx)).then(
          (val) => { ret[idx] = val; active--; next(); },
          (err) => reject(err)
        );
      }
    };
    next();
  });
}

// Retry wrapper (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 429/5xx/‡πÄ‡∏ô‡πá‡∏ï)
async function withRetry(fn, { retries = 4, baseDelayMs = 800 } = {}) {
  let lastErr;
  for (let i = 0; i <= retries; i++) {
    try { return await fn(); } catch (e) {
      const code = e?.status || e?.statusCode;
      if (![429, 500, 502, 503, 504].includes(code)) throw e;
      const wait = baseDelayMs * Math.pow(2, i) + Math.random() * 200;
      console.warn(`‚Üª retry ${i + 1}/${retries} in ${wait | 0}ms (status ${code})`);
      await new Promise(r => setTimeout(r, wait));
      lastErr = e;
    }
  }
  throw lastErr;
}

// ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤
async function extractPages(buffer) {
  console.time('extract');
  const doc = await pdfjsLib.getDocument({
    data: new Uint8Array(buffer),
    standardFontDataUrl,
    disableFontFace: true, // ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£/‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏ô Node
  }).promise;

  const pages = [];
  for (let i = 1; i <= doc.numPages; i++) {
    const page = await doc.getPage(i);
    const tc = await page.getTextContent();
    const text = tc.items.map(it => it.str).join(' ').replace(/\s+/g, ' ').trim();
    pages.push({ page: i, text });
  }
  console.timeEnd('extract');
  return pages;
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏õ‡∏• 1 chunk
async function translateChunk(enText) {
  const prompt = `
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏õ‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‚Üí‡πÑ‡∏ó‡∏¢
‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î:
- ‡∏Ñ‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡πÄ‡∏î‡∏¥‡∏°
- ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢/‡∏ï‡∏±‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
- ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞/‡∏Ñ‡∏≥‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÉ‡∏´‡πâ‡∏Ñ‡∏á‡∏ó‡∏±‡∏ö‡∏®‡∏±‡∏û‡∏ó‡πå‡πÉ‡∏ô‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï (‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©):
${enText}

‡πÄ‡∏≠‡∏≤‡∏ï‡πå‡∏û‡∏∏‡∏ï: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏•‡πâ‡∏ß‡∏ô
`;
  const resp = await withRetry(() =>
    ai.models.generateContent({ model: MODEL, contents: prompt })
  );
  return resp.text;
}

// ===== Route: ‡πÅ‡∏õ‡∏• PDF =====
app.post('/api/translate', upload.single('file'), async (req, res) => {
  if (!req.file) return res.status(400).json({ error: 'no_file' });
  const tempPath = req.file.path;

  try {
    console.log('=== üìÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå:', req.file.originalname, '===');
    const buffer = await fs.readFile(tempPath);

    // 1) Extract
    console.log('‚û°Ô∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å PDF...');
    const pages = await extractPages(buffer);
    console.log(`‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡πÄ‡∏à‡∏≠ ${pages.length} ‡∏´‡∏ô‡πâ‡∏≤`);

    // 2) Translate (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 3 ‡∏´‡∏ô‡πâ‡∏≤)
    console.time('translate_all');
    const translatedPages = await mapConcurrent(pages, 3, async (p) => {
      console.log(`\n=== üî§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏´‡∏ô‡πâ‡∏≤ ${p.page} ===`);
      const parts = chunkText(p.text, 4000);
      const outParts = [];
      for (let i = 0; i < parts.length; i++) {
        const part = parts[i];
        if (!part.trim()) continue;
        console.log(`   ‚è≥ ‡∏´‡∏ô‡πâ‡∏≤ ${p.page} ‚Ä¢ chunk ${i + 1}/${parts.length} ...`);
        const th = await translateChunk(part);
        console.log(`   ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤ ${p.page} ‚Ä¢ ‡πÄ‡∏™‡∏£‡πá‡∏à chunk ${i + 1}`);
        outParts.push(th);
      }
      return { page: p.page, text: outParts.join('\n\n') };
    });
    console.timeEnd('translate_all');

    // 3) Build PDF (‡∏ù‡∏±‡∏á‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢)
    console.log('\nüõ†Ô∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå PDF ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢...');
    console.time('build_pdf');
    const outPdf = await PDFDocument.create();
    outPdf.registerFontkit(fontkit);
    const thaiFontBytes = await fs.readFile(thaiFontPath);
    const thaiFont = await outPdf.embedFont(thaiFontBytes, { subset: true });

    const marginX = 40, marginY = 50, fontSize = 12, lineGap = 18;
    const wrap = (s, max = 95) => s ? (s.match(new RegExp(`.{1,${max}}`, 'g')) || []) : [];

    for (const p of translatedPages.sort((a, b) => a.page - b.page)) {
      let page = outPdf.addPage();
      let { width, height } = page.getSize();
      let y = height - marginY;

      for (const para of p.text.split(/\n{2,}/)) {
        const lines = wrap(para, 100);
        for (const line of lines) {
          if (y < marginY) {
            page = outPdf.addPage();
            ({ width, height } = page.getSize());
            y = height - marginY;
          }
          page.drawText(line, { x: marginX, y, size: fontSize, font: thaiFont });
          y -= lineGap;
        }
        y -= lineGap * 0.5; // paragraph gap
      }
    }
    const pdfBytes = await outPdf.save();
    console.timeEnd('build_pdf');

    console.log('üì¶ ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö...');
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', 'attachment; filename=translated.pdf');
    res.send(Buffer.from(pdfBytes));
    console.log('üéâ ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏õ‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
  } catch (err) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', err);
    res.status(500).json({ error: 'translate_failed', detail: String(err?.message || err) });
  } finally {
    fs.unlink(tempPath).catch(() => {});
  }
});

// Start
app.listen(PORT, '0.0.0.0', () => {
  console.log(`Server on http://localhost:${PORT}`);
});